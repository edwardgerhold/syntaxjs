MakeConstructor(NumberConstructor, true, NumberPrototype);
setInternalSlot(NumberConstructor, SLOTS.CALL, NumberConstructor_call);
setInternalSlot(NumberConstructor, SLOTS.CONSTRUCT, NumberConstructor_construct);
LazyDefineBuiltinFunction(NumberConstructor, "isFinite", 0, NumberConstructor_isFinite);
LazyDefineBuiltinFunction(NumberConstructor, "isNaN", 0, NumberConstructor_isNaN);
LazyDefineBuiltinFunction(NumberConstructor, "isInteger", 0, NumberConstructor_isInteger);
LazyDefineBuiltinFunction(NumberConstructor, $$create, 0, NumberConstructor_$$create);
LazyDefineBuiltinConstant(NumberConstructor, "EPSILON", EPSILON);
LazyDefineBuiltinConstant(NumberConstructor, "MIN_INTEGER", MIN_INTEGER);
LazyDefineBuiltinConstant(NumberConstructor, "MIN_VALUE", MIN_VALUE);
LazyDefineBuiltinConstant(NumberConstructor, "MAX_INTEGER", MAX_INTEGER);
LazyDefineBuiltinConstant(NumberConstructor, "MAX_VALUE", MAX_VALUE);
LazyDefineBuiltinConstant(NumberConstructor, "NaN", NAN);
LazyDefineBuiltinConstant(NumberConstructor, "POSITIVE_INFINITY", POSITIVE_INFINITY);
LazyDefineBuiltinConstant(NumberConstructor, "NEGATIVE_INFINITY", NEGATIVE_INFINITY);
LazyDefineBuiltinFunction(NumberPrototype, "clz", 0, NumberPrototype_clz);
LazyDefineBuiltinFunction(NumberPrototype, "toExponential", 0, NumberPrototype_toExponential);
LazyDefineBuiltinFunction(NumberPrototype, "toFixed", 0, NumberPrototype_toFixed);
LazyDefineBuiltinFunction(NumberPrototype, "toPrecision", 0, NumberPrototype_toPrecision);
LazyDefineBuiltinFunction(NumberPrototype, "toString", 0, NumberPrototype_toString);
LazyDefineBuiltinFunction(NumberPrototype, "valueOf", 0, NumberPrototype_valueOf);
LazyDefineBuiltinConstant(NumberPrototype, $$toStringTag, "Number");